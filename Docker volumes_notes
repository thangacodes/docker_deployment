## Docker Volume Notes:
--------------------------

Pre-requisites:
=================
a) Spin up an EC2 instance in AWS Cloud
b) In my case, I selected OS as CentOS 7
c) Login to the box using password less authentication
d) Install docker on it

In /home/centos section, you need to perform below things to keep the data as persistent..

User CentOS section:
=======================

[centos@linux-practice docker]$ whoami
centos
[centos@linux-practice docker]$ pwd
/home/centos/docker
[centos@linux-practice docker]$ docker volume create web-content  //web-content --> is a docker volume name
[centos@linux-practice docker]$ docker volume ls  //list out docker volumes
DRIVER              VOLUME NAME
local               web-content
[centos@linux-practice docker]$ docker images    // list out the docker images

REPOSITORY                          TAG                 IMAGE ID            CREATED             SIZE
icpage                              latest              3662824de9df        3 hours ago         568 MB
new                                 latest              be86982f1038        3 hours ago         568 MB
docker.io/frolvlad/alpine-python3   latest              703243c9152b        5 weeks ago         62.7 MB
docker.io/centos                    latest              300e315adb2f        8 months ago        209 MB

// Creating FOUR docker containers from the image name called:icpage
[centos@linux-practice docker]$ docker run -dit -p 9700:80 -v web-content:/var/www/html/ --name=app1 icpage
[centos@linux-practice docker]$ docker run -dit -p 9800:80 -v web-content:/var/www/html/ --name=app2 icpage
[centos@linux-practice docker]$ docker run -dit -p 9900:80 -v web-content:/var/www/html/ --name=app3 icpage
[centos@linux-practice docker]$ docker run -dit -p 9100:80 -v web-content:/var/www/html/ --name=app4 icpage

// Note:dit --> detach, interactive terminal -p--mapping custom port from docker host to the container , web-content - is docker volume mapping to the /var/www/html on container
// -p 9700:80 , //9700 is mapped to the docker host. //80 is mapped on docker container

[centos@linux-practice docker]$ docker container ls // listing out the containers

// Root user section // swiching as root user 

$ sudo su -
[root@linux-practice ~]# cd /var/lib/docker/volumes/httpvol/_data/    // default docker volume location in LOCAL is "/var/lib/docker/volumes/httpvol/_data/"
[root@linux-practice ~]# pwd
/var/lib/docker/volumes/web-content/_data
[root@linux-practice _data]# ls
index.html
[root@linux-practice _data]# docker cp index.html app1:/var/www/html
[root@linux-practice _data]# docker cp index.html app2:/var/www/html
[root@linux-practice _data]# docker cp index.html app3:/var/www/html
[root@linux-practice _data]# docker cp index.html app4:/var/www/html

// Copying index.html file to the container httpd path /var/www/hmtl. To perform this action, we need to get into root admin, then needs to be performed. centos user doesn't have
privilege to perform this action.

# Additional details. There are '4' app nodes are running. We'd like to see them IP address, how would i get like below

[centos@linux-practice docker]$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
de38586a9b43        icpage              "/usr/sbin/httpd -..."   32 minutes ago      Up 32 minutes       0.0.0.0:9100->80/tcp   app4
73fa0ef583c4        icpage              "/usr/sbin/httpd -..."   32 minutes ago      Up 32 minutes       0.0.0.0:9900->80/tcp   app3
5b6264b404c6        icpage              "/usr/sbin/httpd -..."   32 minutes ago      Up 32 minutes       0.0.0.0:9800->80/tcp   app2
a7bd47799a5a        icpage              "/usr/sbin/httpd -..."   33 minutes ago      Up 33 minutes       0.0.0.0:9700->80/tcp   app1

[centos@linux-practice docker]$ docker inspect de3 73f 5b6 a7b | grep -i 'IPAddress'
            "SecondaryIPAddresses": null,
            "IPAddress": "172.17.0.5",
                    "IPAddress": "172.17.0.5",
            "SecondaryIPAddresses": null,
            "IPAddress": "172.17.0.4",
                    "IPAddress": "172.17.0.4",
            "SecondaryIPAddresses": null,
            "IPAddress": "172.17.0.3",
                    "IPAddress": "172.17.0.3",
            "SecondaryIPAddresses": null,
            "IPAddress": "172.17.0.2",
                    "IPAddress": "172.17.0.2",

// To stop the Docker containers in one shot // Just take only first '3' digit from the starting of the docker container id. by default container id comes with 12 digitis,

[centos@linux-practice docker]$ docker stop de3 73f 5b6 a7b
de3
73f
5b6
a7b
[centos@linux-practice docker]$ docker system prune   // Removing stopped docker CONTAINERS, VOLUMES, NETWORKS, DANGLING IMAGES
WARNING! This will remove:
	- all stopped containers
	- all volumes not used by at least one container
	- all networks not used by at least one container
	- all dangling images
Are you sure you want to continue? [y/N] y  // iF YOU PRESS 'YES' IT WILL PERFORM ABOVE ACTIONS
Deleted Containers:
de38586a9b43bf68c27be4f565abc1026a4da853adf623752d55b2889145de4f
73fa0ef583c4e52cde084693a1adc350c5dff7cc62615463f64a3fdb2a6c3d5e
5b6264b404c6ba756b9ef2521c1a532253e93d454af7dd33fcf654ee5e448710
a7bd47799a5a17734bbb1b1b17cb801b01c24c5fa728dc15d3e105943ff60b1e

Deleted Volumes:
web-content

Total reclaimed space: 8.435 kB


